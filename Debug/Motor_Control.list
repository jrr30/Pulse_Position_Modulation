
Motor_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000244c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002610  08002610  00012610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002620  08002620  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08002620  08002620  00012620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002628  08002628  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002628  08002628  00012628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800262c  0800262c  0001262c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002630  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000010  08002640  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08002640  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a117  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001954  00000000  00000000  0002a157  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a28  00000000  00000000  0002bab0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000940  00000000  00000000  0002c4d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020e69  00000000  00000000  0002ce18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008680  00000000  00000000  0004dc81  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9033  00000000  00000000  00056301  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011f334  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002910  00000000  00000000  0011f3b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080025f8 	.word	0x080025f8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	080025f8 	.word	0x080025f8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b08a      	sub	sp, #40	; 0x28
 8000508:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050a:	f107 0314 	add.w	r3, r7, #20
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
 8000518:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	613b      	str	r3, [r7, #16]
 800051e:	4b32      	ldr	r3, [pc, #200]	; (80005e8 <MX_GPIO_Init+0xe4>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	4a31      	ldr	r2, [pc, #196]	; (80005e8 <MX_GPIO_Init+0xe4>)
 8000524:	f043 0304 	orr.w	r3, r3, #4
 8000528:	6313      	str	r3, [r2, #48]	; 0x30
 800052a:	4b2f      	ldr	r3, [pc, #188]	; (80005e8 <MX_GPIO_Init+0xe4>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	f003 0304 	and.w	r3, r3, #4
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	4b2b      	ldr	r3, [pc, #172]	; (80005e8 <MX_GPIO_Init+0xe4>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	4a2a      	ldr	r2, [pc, #168]	; (80005e8 <MX_GPIO_Init+0xe4>)
 8000540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000544:	6313      	str	r3, [r2, #48]	; 0x30
 8000546:	4b28      	ldr	r3, [pc, #160]	; (80005e8 <MX_GPIO_Init+0xe4>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	4b24      	ldr	r3, [pc, #144]	; (80005e8 <MX_GPIO_Init+0xe4>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	4a23      	ldr	r2, [pc, #140]	; (80005e8 <MX_GPIO_Init+0xe4>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	6313      	str	r3, [r2, #48]	; 0x30
 8000562:	4b21      	ldr	r3, [pc, #132]	; (80005e8 <MX_GPIO_Init+0xe4>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	4b1d      	ldr	r3, [pc, #116]	; (80005e8 <MX_GPIO_Init+0xe4>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4a1c      	ldr	r2, [pc, #112]	; (80005e8 <MX_GPIO_Init+0xe4>)
 8000578:	f043 0302 	orr.w	r3, r3, #2
 800057c:	6313      	str	r3, [r2, #48]	; 0x30
 800057e:	4b1a      	ldr	r3, [pc, #104]	; (80005e8 <MX_GPIO_Init+0xe4>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	f003 0302 	and.w	r3, r3, #2
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_11, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8000590:	4816      	ldr	r0, [pc, #88]	; (80005ec <MX_GPIO_Init+0xe8>)
 8000592:	f000 ff03 	bl	800139c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC8 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8000596:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800059a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059c:	2301      	movs	r3, #1
 800059e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a4:	2300      	movs	r3, #0
 80005a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005a8:	f107 0314 	add.w	r3, r7, #20
 80005ac:	4619      	mov	r1, r3
 80005ae:	480f      	ldr	r0, [pc, #60]	; (80005ec <MX_GPIO_Init+0xe8>)
 80005b0:	f000 fd62 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80005b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005ba:	4b0d      	ldr	r3, [pc, #52]	; (80005f0 <MX_GPIO_Init+0xec>)
 80005bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	2300      	movs	r3, #0
 80005c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	4619      	mov	r1, r3
 80005c8:	4808      	ldr	r0, [pc, #32]	; (80005ec <MX_GPIO_Init+0xe8>)
 80005ca:	f000 fd55 	bl	8001078 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2100      	movs	r1, #0
 80005d2:	2028      	movs	r0, #40	; 0x28
 80005d4:	f000 fd19 	bl	800100a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005d8:	2028      	movs	r0, #40	; 0x28
 80005da:	f000 fd32 	bl	8001042 <HAL_NVIC_EnableIRQ>

}
 80005de:	bf00      	nop
 80005e0:	3728      	adds	r7, #40	; 0x28
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40020800 	.word	0x40020800
 80005f0:	10110000 	.word	0x10110000

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f000 fb98 	bl	8000d2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f818 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f7ff ff80 	bl	8000504 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000604:	f000 fa58 	bl	8000ab8 <MX_TIM1_Init>
  MX_TIM7_Init();
 8000608:	f000 fadc 	bl	8000bc4 <MX_TIM7_Init>
  MX_TIM6_Init();
 800060c:	f000 faa4 	bl	8000b58 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  HAL_TIM_Base_Start(&htim7);
 8000610:	4805      	ldr	r0, [pc, #20]	; (8000628 <main+0x34>)
 8000612:	f001 fbcc 	bl	8001dae <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim1);
 8000616:	4805      	ldr	r0, [pc, #20]	; (800062c <main+0x38>)
 8000618:	f001 fbed 	bl	8001df6 <HAL_TIM_Base_Start_IT>
  //HAL_TIM_Base_Start(&htim6);
  Soft_Start();
 800061c:	f000 f93e 	bl	800089c <Soft_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  Set_Speed();
 8000620:	f000 f8c8 	bl	80007b4 <Set_Speed>
 8000624:	e7fc      	b.n	8000620 <main+0x2c>
 8000626:	bf00      	nop
 8000628:	200000b0 	.word	0x200000b0
 800062c:	20000070 	.word	0x20000070

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b094      	sub	sp, #80	; 0x50
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 031c 	add.w	r3, r7, #28
 800063a:	2234      	movs	r2, #52	; 0x34
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f001 ffd2 	bl	80025e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	f107 0308 	add.w	r3, r7, #8
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000654:	2300      	movs	r3, #0
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	4b23      	ldr	r3, [pc, #140]	; (80006e8 <SystemClock_Config+0xb8>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	4a22      	ldr	r2, [pc, #136]	; (80006e8 <SystemClock_Config+0xb8>)
 800065e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000662:	6413      	str	r3, [r2, #64]	; 0x40
 8000664:	4b20      	ldr	r3, [pc, #128]	; (80006e8 <SystemClock_Config+0xb8>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000670:	2300      	movs	r3, #0
 8000672:	603b      	str	r3, [r7, #0]
 8000674:	4b1d      	ldr	r3, [pc, #116]	; (80006ec <SystemClock_Config+0xbc>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800067c:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemClock_Config+0xbc>)
 800067e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000682:	6013      	str	r3, [r2, #0]
 8000684:	4b19      	ldr	r3, [pc, #100]	; (80006ec <SystemClock_Config+0xbc>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800068c:	603b      	str	r3, [r7, #0]
 800068e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000690:	2302      	movs	r3, #2
 8000692:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000694:	2301      	movs	r3, #1
 8000696:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000698:	2310      	movs	r3, #16
 800069a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800069c:	2300      	movs	r3, #0
 800069e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a0:	f107 031c 	add.w	r3, r7, #28
 80006a4:	4618      	mov	r0, r3
 80006a6:	f001 f8fd 	bl	80018a4 <HAL_RCC_OscConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006b0:	f000 f878 	bl	80007a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b4:	230f      	movs	r3, #15
 80006b6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006b8:	2300      	movs	r3, #0
 80006ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c8:	f107 0308 	add.w	r3, r7, #8
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f000 feb0 	bl	8001434 <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006da:	f000 f863 	bl	80007a4 <Error_Handler>
  }
}
 80006de:	bf00      	nop
 80006e0:	3750      	adds	r7, #80	; 0x50
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]

	if(htim == &htim1)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4a08      	ldr	r2, [pc, #32]	; (800071c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d109      	bne.n	8000714 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_11);
 8000700:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000704:	4806      	ldr	r0, [pc, #24]	; (8000720 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000706:	f000 fe62 	bl	80013ce <HAL_GPIO_TogglePin>
		PPM(G_Angule_Value);
 800070a:	4b06      	ldr	r3, [pc, #24]	; (8000724 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	4618      	mov	r0, r3
 8000710:	f000 f896 	bl	8000840 <PPM>

	}
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000070 	.word	0x20000070
 8000720:	40020800 	.word	0x40020800
 8000724:	2000002c 	.word	0x2000002c

08000728 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == INCREMENT_BUTTON)
 8000732:	88fb      	ldrh	r3, [r7, #6]
 8000734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000738:	d113      	bne.n	8000762 <HAL_GPIO_EXTI_Callback+0x3a>
	{
		gflag_increment = decrement;
 800073a:	4b18      	ldr	r3, [pc, #96]	; (800079c <HAL_GPIO_EXTI_Callback+0x74>)
 800073c:	2201      	movs	r2, #1
 800073e:	701a      	strb	r2, [r3, #0]
		if(G_phase_Value >= 0x04U)
 8000740:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <HAL_GPIO_EXTI_Callback+0x78>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	b2db      	uxtb	r3, r3
 8000746:	2b03      	cmp	r3, #3
 8000748:	d903      	bls.n	8000752 <HAL_GPIO_EXTI_Callback+0x2a>
		{
			G_phase_Value = 0x04U;
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <HAL_GPIO_EXTI_Callback+0x78>)
 800074c:	2204      	movs	r2, #4
 800074e:	701a      	strb	r2, [r3, #0]
		{
			G_phase_Value = G_phase_Value >> 0x01U;
		}

	}
}
 8000750:	e01e      	b.n	8000790 <HAL_GPIO_EXTI_Callback+0x68>
			G_phase_Value = G_phase_Value << 0x01U;
 8000752:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <HAL_GPIO_EXTI_Callback+0x78>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	b2db      	uxtb	r3, r3
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	b2da      	uxtb	r2, r3
 800075c:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <HAL_GPIO_EXTI_Callback+0x78>)
 800075e:	701a      	strb	r2, [r3, #0]
}
 8000760:	e016      	b.n	8000790 <HAL_GPIO_EXTI_Callback+0x68>
	else if(GPIO_Pin == DECREMENT_BUTTON)
 8000762:	88fb      	ldrh	r3, [r7, #6]
 8000764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000768:	d112      	bne.n	8000790 <HAL_GPIO_EXTI_Callback+0x68>
		gflag_increment = increment;
 800076a:	4b0c      	ldr	r3, [pc, #48]	; (800079c <HAL_GPIO_EXTI_Callback+0x74>)
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]
		if(G_phase_Value <= 0x01U)
 8000770:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <HAL_GPIO_EXTI_Callback+0x78>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	b2db      	uxtb	r3, r3
 8000776:	2b01      	cmp	r3, #1
 8000778:	d803      	bhi.n	8000782 <HAL_GPIO_EXTI_Callback+0x5a>
			G_phase_Value = 0x01U;
 800077a:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <HAL_GPIO_EXTI_Callback+0x78>)
 800077c:	2201      	movs	r2, #1
 800077e:	701a      	strb	r2, [r3, #0]
}
 8000780:	e006      	b.n	8000790 <HAL_GPIO_EXTI_Callback+0x68>
			G_phase_Value = G_phase_Value >> 0x01U;
 8000782:	4b07      	ldr	r3, [pc, #28]	; (80007a0 <HAL_GPIO_EXTI_Callback+0x78>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	b2db      	uxtb	r3, r3
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	b2da      	uxtb	r2, r3
 800078c:	4b04      	ldr	r3, [pc, #16]	; (80007a0 <HAL_GPIO_EXTI_Callback+0x78>)
 800078e:	701a      	strb	r2, [r3, #0]
}
 8000790:	bf00      	nop
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	2000002d 	.word	0x2000002d
 80007a0:	20000000 	.word	0x20000000

080007a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
	...

080007b4 <Set_Speed>:
  * @param  specific angle were the pulse in modulated
  * @note   The angle value must be between 10 to 170 degrees
  * @retval None
  */
void Set_Speed(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
	static uint8_t lphase = PHASE_MID;
	uint8_t langule = 0x00U;
 80007ba:	2300      	movs	r3, #0
 80007bc:	71fb      	strb	r3, [r7, #7]

	/* Checking button status*/
	if(lphase != G_phase_Value)
 80007be:	4b1c      	ldr	r3, [pc, #112]	; (8000830 <Set_Speed+0x7c>)
 80007c0:	781a      	ldrb	r2, [r3, #0]
 80007c2:	4b1c      	ldr	r3, [pc, #112]	; (8000834 <Set_Speed+0x80>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d023      	beq.n	8000814 <Set_Speed+0x60>
	{

		switch(G_phase_Value)
 80007cc:	4b19      	ldr	r3, [pc, #100]	; (8000834 <Set_Speed+0x80>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	2b02      	cmp	r3, #2
 80007d4:	d007      	beq.n	80007e6 <Set_Speed+0x32>
 80007d6:	2b04      	cmp	r3, #4
 80007d8:	d008      	beq.n	80007ec <Set_Speed+0x38>
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d000      	beq.n	80007e0 <Set_Speed+0x2c>
			break;
		case PHASE_HIGH:
			langule = SPEED_HIGH;
			break;
		default:
			break;
 80007de:	e008      	b.n	80007f2 <Set_Speed+0x3e>
			langule = SPEED_LOW;
 80007e0:	238c      	movs	r3, #140	; 0x8c
 80007e2:	71fb      	strb	r3, [r7, #7]
			break;
 80007e4:	e005      	b.n	80007f2 <Set_Speed+0x3e>
			langule = SPEED_MEDIUM;
 80007e6:	235a      	movs	r3, #90	; 0x5a
 80007e8:	71fb      	strb	r3, [r7, #7]
			break;
 80007ea:	e002      	b.n	80007f2 <Set_Speed+0x3e>
			langule = SPEED_HIGH;
 80007ec:	230a      	movs	r3, #10
 80007ee:	71fb      	strb	r3, [r7, #7]
			break;
 80007f0:	bf00      	nop
		}

		soft_switching(G_Angule_Value, langule, gflag_increment);
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <Set_Speed+0x84>)
 80007f4:	7818      	ldrb	r0, [r3, #0]
 80007f6:	4b11      	ldr	r3, [pc, #68]	; (800083c <Set_Speed+0x88>)
 80007f8:	781a      	ldrb	r2, [r3, #0]
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	4619      	mov	r1, r3
 80007fe:	f000 f8a1 	bl	8000944 <soft_switching>

		/* Updating local variable with current phase*/
		lphase = G_phase_Value;
 8000802:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <Set_Speed+0x80>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	b2da      	uxtb	r2, r3
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <Set_Speed+0x7c>)
 800080a:	701a      	strb	r2, [r3, #0]
		/* Updating Gobal variable with last angle value*/
		G_Angule_Value = langule;
 800080c:	4a0a      	ldr	r2, [pc, #40]	; (8000838 <Set_Speed+0x84>)
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	7013      	strb	r3, [r2, #0]
		if(G_Angule_Value <= SPEED_LOW && G_Angule_Value >= SPEED_HIGH)
		{
			  Armonic_Reduction();
		}
	}
}
 8000812:	e009      	b.n	8000828 <Set_Speed+0x74>
		if(G_Angule_Value <= SPEED_LOW && G_Angule_Value >= SPEED_HIGH)
 8000814:	4b08      	ldr	r3, [pc, #32]	; (8000838 <Set_Speed+0x84>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b8c      	cmp	r3, #140	; 0x8c
 800081a:	d805      	bhi.n	8000828 <Set_Speed+0x74>
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <Set_Speed+0x84>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b09      	cmp	r3, #9
 8000822:	d901      	bls.n	8000828 <Set_Speed+0x74>
			  Armonic_Reduction();
 8000824:	f000 f876 	bl	8000914 <Armonic_Reduction>
}
 8000828:	bf00      	nop
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000001 	.word	0x20000001
 8000834:	20000000 	.word	0x20000000
 8000838:	2000002c 	.word	0x2000002c
 800083c:	2000002d 	.word	0x2000002d

08000840 <PPM>:
  * @param  specific angle were the pulse in modulated
  * @note   The angle value must be between 10 to 170 degrees
  * @retval None
  */
void PPM(uint8_t angle)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(TRIGGER_PIN_PORT, TRIGGER_PIN, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000850:	4811      	ldr	r0, [pc, #68]	; (8000898 <PPM+0x58>)
 8000852:	f000 fda3 	bl	800139c <HAL_GPIO_WritePin>
	delay_us(Angule_to_Time(angle));
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	4618      	mov	r0, r3
 800085a:	f000 f841 	bl	80008e0 <Angule_to_Time>
 800085e:	4603      	mov	r3, r0
 8000860:	4618      	mov	r0, r3
 8000862:	f000 f825 	bl	80008b0 <delay_us>
	HAL_GPIO_WritePin(TRIGGER_PIN_PORT, TRIGGER_PIN, GPIO_PIN_SET);
 8000866:	2201      	movs	r2, #1
 8000868:	f44f 7180 	mov.w	r1, #256	; 0x100
 800086c:	480a      	ldr	r0, [pc, #40]	; (8000898 <PPM+0x58>)
 800086e:	f000 fd95 	bl	800139c <HAL_GPIO_WritePin>
	delay_us(500);
 8000872:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000876:	f000 f81b 	bl	80008b0 <delay_us>
	HAL_GPIO_WritePin(TRIGGER_PIN_PORT, TRIGGER_PIN, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000880:	4805      	ldr	r0, [pc, #20]	; (8000898 <PPM+0x58>)
 8000882:	f000 fd8b 	bl	800139c <HAL_GPIO_WritePin>
	delay_us(500);
 8000886:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800088a:	f000 f811 	bl	80008b0 <delay_us>
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40020800 	.word	0x40020800

0800089c <Soft_Start>:
  * @param  specific angle were the pulse in modulated
  * @note   The angle value must be between 10 to 170 degrees
  * @retval None
  */
void Soft_Start(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
	soft_switching(SPEED_START, SPEED_MEDIUM, decrement);
 80008a0:	2201      	movs	r2, #1
 80008a2:	215a      	movs	r1, #90	; 0x5a
 80008a4:	20aa      	movs	r0, #170	; 0xaa
 80008a6:	f000 f84d 	bl	8000944 <soft_switching>
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
	...

080008b0 <delay_us>:
  * @param  specific angle were the pulse in modulated
  * @note   The angle value must be between 10 to 170 degrees
  * @retval None
  */
static void delay_us(uint32_t microseconds)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim7, 0);
 80008b8:	4b08      	ldr	r3, [pc, #32]	; (80008dc <delay_us+0x2c>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2200      	movs	r2, #0
 80008be:	625a      	str	r2, [r3, #36]	; 0x24

	while( __HAL_TIM_GET_COUNTER(&htim7) < microseconds);
 80008c0:	bf00      	nop
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <delay_us+0x2c>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008c8:	687a      	ldr	r2, [r7, #4]
 80008ca:	429a      	cmp	r2, r3
 80008cc:	d8f9      	bhi.n	80008c2 <delay_us+0x12>
}
 80008ce:	bf00      	nop
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	200000b0 	.word	0x200000b0

080008e0 <Angule_to_Time>:
  * @param  angle to be converted
  * @note   The angle value must be between 10 to 170 degrees
  * @retval time equivalence
  */
static uint16_t Angule_to_Time(uint8_t angule)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
	uint16_t ltime_result_convertion = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	81fb      	strh	r3, [r7, #14]

	ltime_result_convertion = ((9000U * angule) / (SPEED_START));
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	f242 3228 	movw	r2, #9000	; 0x2328
 80008f4:	fb02 f303 	mul.w	r3, r2, r3
 80008f8:	4a05      	ldr	r2, [pc, #20]	; (8000910 <Angule_to_Time+0x30>)
 80008fa:	fba2 2303 	umull	r2, r3, r2, r3
 80008fe:	09db      	lsrs	r3, r3, #7
 8000900:	81fb      	strh	r3, [r7, #14]

	return ltime_result_convertion;
 8000902:	89fb      	ldrh	r3, [r7, #14]

}
 8000904:	4618      	mov	r0, r3
 8000906:	3714      	adds	r7, #20
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	c0c0c0c1 	.word	0xc0c0c0c1

08000914 <Armonic_Reduction>:
  * @brief  This algorithm will reduce the arminc
  * @param  None
  * @retval None
  */
static void Armonic_Reduction(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
	G_Angule_Value += 5;
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <Armonic_Reduction+0x2c>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	3305      	adds	r3, #5
 800091e:	b2da      	uxtb	r2, r3
 8000920:	4b07      	ldr	r3, [pc, #28]	; (8000940 <Armonic_Reduction+0x2c>)
 8000922:	701a      	strb	r2, [r3, #0]
	HAL_Delay(8);
 8000924:	2008      	movs	r0, #8
 8000926:	f000 fa73 	bl	8000e10 <HAL_Delay>
	G_Angule_Value -= 5;
 800092a:	4b05      	ldr	r3, [pc, #20]	; (8000940 <Armonic_Reduction+0x2c>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	3b05      	subs	r3, #5
 8000930:	b2da      	uxtb	r2, r3
 8000932:	4b03      	ldr	r3, [pc, #12]	; (8000940 <Armonic_Reduction+0x2c>)
 8000934:	701a      	strb	r2, [r3, #0]
	HAL_Delay(8);
 8000936:	2008      	movs	r0, #8
 8000938:	f000 fa6a 	bl	8000e10 <HAL_Delay>
}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	2000002c 	.word	0x2000002c

08000944 <soft_switching>:
  *         -increment
  *         -decrement
  * @retval None
  */
static void soft_switching(uint8_t angule_start, uint8_t angule_end, Direction_increment_T direction)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	71fb      	strb	r3, [r7, #7]
 800094e:	460b      	mov	r3, r1
 8000950:	71bb      	strb	r3, [r7, #6]
 8000952:	4613      	mov	r3, r2
 8000954:	717b      	strb	r3, [r7, #5]
	uint8_t liter = 0;
 8000956:	2300      	movs	r3, #0
 8000958:	73fb      	strb	r3, [r7, #15]
	if(direction == increment)
 800095a:	797b      	ldrb	r3, [r7, #5]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d110      	bne.n	8000982 <soft_switching+0x3e>
	{
		for(liter = angule_start; liter <= angule_end; liter++)
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	73fb      	strb	r3, [r7, #15]
 8000964:	e008      	b.n	8000978 <soft_switching+0x34>
		{
			G_Angule_Value = liter;
 8000966:	4a12      	ldr	r2, [pc, #72]	; (80009b0 <soft_switching+0x6c>)
 8000968:	7bfb      	ldrb	r3, [r7, #15]
 800096a:	7013      	strb	r3, [r2, #0]
			HAL_Delay(8);
 800096c:	2008      	movs	r0, #8
 800096e:	f000 fa4f 	bl	8000e10 <HAL_Delay>
		for(liter = angule_start; liter <= angule_end; liter++)
 8000972:	7bfb      	ldrb	r3, [r7, #15]
 8000974:	3301      	adds	r3, #1
 8000976:	73fb      	strb	r3, [r7, #15]
 8000978:	7bfa      	ldrb	r2, [r7, #15]
 800097a:	79bb      	ldrb	r3, [r7, #6]
 800097c:	429a      	cmp	r2, r3
 800097e:	d9f2      	bls.n	8000966 <soft_switching+0x22>
		{
			G_Angule_Value = liter;
			HAL_Delay(8);
		}
	}
}
 8000980:	e012      	b.n	80009a8 <soft_switching+0x64>
	else if(direction == decrement)
 8000982:	797b      	ldrb	r3, [r7, #5]
 8000984:	2b01      	cmp	r3, #1
 8000986:	d10f      	bne.n	80009a8 <soft_switching+0x64>
		for(liter = angule_start; liter >= angule_end; liter--)
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	73fb      	strb	r3, [r7, #15]
 800098c:	e008      	b.n	80009a0 <soft_switching+0x5c>
			G_Angule_Value = liter;
 800098e:	4a08      	ldr	r2, [pc, #32]	; (80009b0 <soft_switching+0x6c>)
 8000990:	7bfb      	ldrb	r3, [r7, #15]
 8000992:	7013      	strb	r3, [r2, #0]
			HAL_Delay(8);
 8000994:	2008      	movs	r0, #8
 8000996:	f000 fa3b 	bl	8000e10 <HAL_Delay>
		for(liter = angule_start; liter >= angule_end; liter--)
 800099a:	7bfb      	ldrb	r3, [r7, #15]
 800099c:	3b01      	subs	r3, #1
 800099e:	73fb      	strb	r3, [r7, #15]
 80009a0:	7bfa      	ldrb	r2, [r7, #15]
 80009a2:	79bb      	ldrb	r3, [r7, #6]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d2f2      	bcs.n	800098e <soft_switching+0x4a>
}
 80009a8:	bf00      	nop
 80009aa:	3710      	adds	r7, #16
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	2000002c 	.word	0x2000002c

080009b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <HAL_MspInit+0x4c>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c2:	4a0f      	ldr	r2, [pc, #60]	; (8000a00 <HAL_MspInit+0x4c>)
 80009c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ca:	4b0d      	ldr	r3, [pc, #52]	; (8000a00 <HAL_MspInit+0x4c>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	603b      	str	r3, [r7, #0]
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <HAL_MspInit+0x4c>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	4a08      	ldr	r2, [pc, #32]	; (8000a00 <HAL_MspInit+0x4c>)
 80009e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e4:	6413      	str	r3, [r2, #64]	; 0x40
 80009e6:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <HAL_MspInit+0x4c>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	40023800 	.word	0x40023800

08000a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a16:	e7fe      	b.n	8000a16 <HardFault_Handler+0x4>

08000a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <MemManage_Handler+0x4>

08000a1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a22:	e7fe      	b.n	8000a22 <BusFault_Handler+0x4>

08000a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <UsageFault_Handler+0x4>

08000a2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a58:	f000 f9ba 	bl	8000dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a64:	4802      	ldr	r0, [pc, #8]	; (8000a70 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a66:	f001 f9ea 	bl	8001e3e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000070 	.word	0x20000070

08000a74 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000a78:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000a7c:	f000 fcc2 	bl	8001404 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000a80:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000a84:	f000 fcbe 	bl	8001404 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <SystemInit+0x28>)
 8000a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a96:	4a07      	ldr	r2, [pc, #28]	; (8000ab4 <SystemInit+0x28>)
 8000a98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000aa0:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <SystemInit+0x28>)
 8000aa2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000aa6:	609a      	str	r2, [r3, #8]
#endif
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000abe:	f107 0308 	add.w	r3, r7, #8
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000acc:	463b      	mov	r3, r7
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8000ad4:	4b1e      	ldr	r3, [pc, #120]	; (8000b50 <MX_TIM1_Init+0x98>)
 8000ad6:	4a1f      	ldr	r2, [pc, #124]	; (8000b54 <MX_TIM1_Init+0x9c>)
 8000ad8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8000ada:	4b1d      	ldr	r3, [pc, #116]	; (8000b50 <MX_TIM1_Init+0x98>)
 8000adc:	220f      	movs	r2, #15
 8000ade:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae0:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <MX_TIM1_Init+0x98>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8000ae6:	4b1a      	ldr	r3, [pc, #104]	; (8000b50 <MX_TIM1_Init+0x98>)
 8000ae8:	f242 720f 	movw	r2, #9999	; 0x270f
 8000aec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aee:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <MX_TIM1_Init+0x98>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000af4:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <MX_TIM1_Init+0x98>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <MX_TIM1_Init+0x98>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b00:	4813      	ldr	r0, [pc, #76]	; (8000b50 <MX_TIM1_Init+0x98>)
 8000b02:	f001 f929 	bl	8001d58 <HAL_TIM_Base_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000b0c:	f7ff fe4a 	bl	80007a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b16:	f107 0308 	add.w	r3, r7, #8
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	480c      	ldr	r0, [pc, #48]	; (8000b50 <MX_TIM1_Init+0x98>)
 8000b1e:	f001 fa96 	bl	800204e <HAL_TIM_ConfigClockSource>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000b28:	f7ff fe3c 	bl	80007a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b34:	463b      	mov	r3, r7
 8000b36:	4619      	mov	r1, r3
 8000b38:	4805      	ldr	r0, [pc, #20]	; (8000b50 <MX_TIM1_Init+0x98>)
 8000b3a:	f001 fca1 	bl	8002480 <HAL_TIMEx_MasterConfigSynchronization>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000b44:	f7ff fe2e 	bl	80007a4 <Error_Handler>
  }

}
 8000b48:	bf00      	nop
 8000b4a:	3718      	adds	r7, #24
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000070 	.word	0x20000070
 8000b54:	40010000 	.word	0x40010000

08000b58 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b5e:	463b      	mov	r3, r7
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <MX_TIM6_Init+0x64>)
 8000b68:	4a15      	ldr	r2, [pc, #84]	; (8000bc0 <MX_TIM6_Init+0x68>)
 8000b6a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16-1;
 8000b6c:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <MX_TIM6_Init+0x64>)
 8000b6e:	220f      	movs	r2, #15
 8000b70:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b72:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <MX_TIM6_Init+0x64>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535 -1;
 8000b78:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <MX_TIM6_Init+0x64>)
 8000b7a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000b7e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b80:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <MX_TIM6_Init+0x64>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b86:	480d      	ldr	r0, [pc, #52]	; (8000bbc <MX_TIM6_Init+0x64>)
 8000b88:	f001 f8e6 	bl	8001d58 <HAL_TIM_Base_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000b92:	f7ff fe07 	bl	80007a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b96:	2300      	movs	r3, #0
 8000b98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b9e:	463b      	mov	r3, r7
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4806      	ldr	r0, [pc, #24]	; (8000bbc <MX_TIM6_Init+0x64>)
 8000ba4:	f001 fc6c 	bl	8002480 <HAL_TIMEx_MasterConfigSynchronization>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000bae:	f7ff fdf9 	bl	80007a4 <Error_Handler>
  }

}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000030 	.word	0x20000030
 8000bc0:	40001000 	.word	0x40001000

08000bc4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bca:	463b      	mov	r3, r7
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 8000bd2:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <MX_TIM7_Init+0x64>)
 8000bd4:	4a15      	ldr	r2, [pc, #84]	; (8000c2c <MX_TIM7_Init+0x68>)
 8000bd6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 16-1;
 8000bd8:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <MX_TIM7_Init+0x64>)
 8000bda:	220f      	movs	r2, #15
 8000bdc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bde:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <MX_TIM7_Init+0x64>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535 -1;
 8000be4:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <MX_TIM7_Init+0x64>)
 8000be6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000bea:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bec:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <MX_TIM7_Init+0x64>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000bf2:	480d      	ldr	r0, [pc, #52]	; (8000c28 <MX_TIM7_Init+0x64>)
 8000bf4:	f001 f8b0 	bl	8001d58 <HAL_TIM_Base_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000bfe:	f7ff fdd1 	bl	80007a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c02:	2300      	movs	r3, #0
 8000c04:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000c0a:	463b      	mov	r3, r7
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4806      	ldr	r0, [pc, #24]	; (8000c28 <MX_TIM7_Init+0x64>)
 8000c10:	f001 fc36 	bl	8002480 <HAL_TIMEx_MasterConfigSynchronization>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000c1a:	f7ff fdc3 	bl	80007a4 <Error_Handler>
  }

}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	200000b0 	.word	0x200000b0
 8000c2c:	40001400 	.word	0x40001400

08000c30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a22      	ldr	r2, [pc, #136]	; (8000cc8 <HAL_TIM_Base_MspInit+0x98>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d116      	bne.n	8000c70 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
 8000c46:	4b21      	ldr	r3, [pc, #132]	; (8000ccc <HAL_TIM_Base_MspInit+0x9c>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4a:	4a20      	ldr	r2, [pc, #128]	; (8000ccc <HAL_TIM_Base_MspInit+0x9c>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6453      	str	r3, [r2, #68]	; 0x44
 8000c52:	4b1e      	ldr	r3, [pc, #120]	; (8000ccc <HAL_TIM_Base_MspInit+0x9c>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	617b      	str	r3, [r7, #20]
 8000c5c:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2100      	movs	r1, #0
 8000c62:	2019      	movs	r0, #25
 8000c64:	f000 f9d1 	bl	800100a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c68:	2019      	movs	r0, #25
 8000c6a:	f000 f9ea 	bl	8001042 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8000c6e:	e026      	b.n	8000cbe <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM6)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a16      	ldr	r2, [pc, #88]	; (8000cd0 <HAL_TIM_Base_MspInit+0xa0>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d10e      	bne.n	8000c98 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <HAL_TIM_Base_MspInit+0x9c>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	4a12      	ldr	r2, [pc, #72]	; (8000ccc <HAL_TIM_Base_MspInit+0x9c>)
 8000c84:	f043 0310 	orr.w	r3, r3, #16
 8000c88:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8a:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <HAL_TIM_Base_MspInit+0x9c>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	f003 0310 	and.w	r3, r3, #16
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]
}
 8000c96:	e012      	b.n	8000cbe <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM7)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a0d      	ldr	r2, [pc, #52]	; (8000cd4 <HAL_TIM_Base_MspInit+0xa4>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d10d      	bne.n	8000cbe <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <HAL_TIM_Base_MspInit+0x9c>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	4a08      	ldr	r2, [pc, #32]	; (8000ccc <HAL_TIM_Base_MspInit+0x9c>)
 8000cac:	f043 0320 	orr.w	r3, r3, #32
 8000cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_TIM_Base_MspInit+0x9c>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	f003 0320 	and.w	r3, r3, #32
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
}
 8000cbe:	bf00      	nop
 8000cc0:	3718      	adds	r7, #24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40010000 	.word	0x40010000
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40001000 	.word	0x40001000
 8000cd4:	40001400 	.word	0x40001400

08000cd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d10 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000cdc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000cde:	e003      	b.n	8000ce8 <LoopCopyDataInit>

08000ce0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ce2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ce4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ce6:	3104      	adds	r1, #4

08000ce8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ce8:	480b      	ldr	r0, [pc, #44]	; (8000d18 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000cec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000cee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000cf0:	d3f6      	bcc.n	8000ce0 <CopyDataInit>
  ldr  r2, =_sbss
 8000cf2:	4a0b      	ldr	r2, [pc, #44]	; (8000d20 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000cf4:	e002      	b.n	8000cfc <LoopFillZerobss>

08000cf6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000cf6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000cf8:	f842 3b04 	str.w	r3, [r2], #4

08000cfc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000cfc:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000cfe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d00:	d3f9      	bcc.n	8000cf6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d02:	f7ff fec3 	bl	8000a8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d06:	f001 fc4b 	bl	80025a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d0a:	f7ff fc73 	bl	80005f4 <main>
  bx  lr    
 8000d0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d10:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000d14:	08002630 	.word	0x08002630
  ldr  r0, =_sdata
 8000d18:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d1c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000d20:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000d24:	200000f4 	.word	0x200000f4

08000d28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d28:	e7fe      	b.n	8000d28 <ADC_IRQHandler>
	...

08000d2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d30:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <HAL_Init+0x40>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a0d      	ldr	r2, [pc, #52]	; (8000d6c <HAL_Init+0x40>)
 8000d36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <HAL_Init+0x40>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <HAL_Init+0x40>)
 8000d42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d48:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <HAL_Init+0x40>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a07      	ldr	r2, [pc, #28]	; (8000d6c <HAL_Init+0x40>)
 8000d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d54:	2003      	movs	r0, #3
 8000d56:	f000 f94d 	bl	8000ff4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f000 f808 	bl	8000d70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d60:	f7ff fe28 	bl	80009b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40023c00 	.word	0x40023c00

08000d70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <HAL_InitTick+0x54>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <HAL_InitTick+0x58>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	4619      	mov	r1, r3
 8000d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 f965 	bl	800105e <HAL_SYSTICK_Config>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e00e      	b.n	8000dbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2b0f      	cmp	r3, #15
 8000da2:	d80a      	bhi.n	8000dba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da4:	2200      	movs	r2, #0
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dac:	f000 f92d 	bl	800100a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db0:	4a06      	ldr	r2, [pc, #24]	; (8000dcc <HAL_InitTick+0x5c>)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000db6:	2300      	movs	r3, #0
 8000db8:	e000      	b.n	8000dbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000004 	.word	0x20000004
 8000dc8:	2000000c 	.word	0x2000000c
 8000dcc:	20000008 	.word	0x20000008

08000dd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <HAL_IncTick+0x20>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <HAL_IncTick+0x24>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4413      	add	r3, r2
 8000de0:	4a04      	ldr	r2, [pc, #16]	; (8000df4 <HAL_IncTick+0x24>)
 8000de2:	6013      	str	r3, [r2, #0]
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	2000000c 	.word	0x2000000c
 8000df4:	200000f0 	.word	0x200000f0

08000df8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dfc:	4b03      	ldr	r3, [pc, #12]	; (8000e0c <HAL_GetTick+0x14>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	200000f0 	.word	0x200000f0

08000e10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e18:	f7ff ffee 	bl	8000df8 <HAL_GetTick>
 8000e1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e28:	d005      	beq.n	8000e36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e2a:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <HAL_Delay+0x40>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	4413      	add	r3, r2
 8000e34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e36:	bf00      	nop
 8000e38:	f7ff ffde 	bl	8000df8 <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	68fa      	ldr	r2, [r7, #12]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d8f7      	bhi.n	8000e38 <HAL_Delay+0x28>
  {
  }
}
 8000e48:	bf00      	nop
 8000e4a:	3710      	adds	r7, #16
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	2000000c 	.word	0x2000000c

08000e54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <__NVIC_SetPriorityGrouping+0x44>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e6a:	68ba      	ldr	r2, [r7, #8]
 8000e6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e70:	4013      	ands	r3, r2
 8000e72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e86:	4a04      	ldr	r2, [pc, #16]	; (8000e98 <__NVIC_SetPriorityGrouping+0x44>)
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	60d3      	str	r3, [r2, #12]
}
 8000e8c:	bf00      	nop
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea0:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	0a1b      	lsrs	r3, r3, #8
 8000ea6:	f003 0307 	and.w	r3, r3, #7
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	db0b      	blt.n	8000ee2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	f003 021f 	and.w	r2, r3, #31
 8000ed0:	4907      	ldr	r1, [pc, #28]	; (8000ef0 <__NVIC_EnableIRQ+0x38>)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	095b      	lsrs	r3, r3, #5
 8000ed8:	2001      	movs	r0, #1
 8000eda:	fa00 f202 	lsl.w	r2, r0, r2
 8000ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	e000e100 	.word	0xe000e100

08000ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	6039      	str	r1, [r7, #0]
 8000efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	db0a      	blt.n	8000f1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	490c      	ldr	r1, [pc, #48]	; (8000f40 <__NVIC_SetPriority+0x4c>)
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	0112      	lsls	r2, r2, #4
 8000f14:	b2d2      	uxtb	r2, r2
 8000f16:	440b      	add	r3, r1
 8000f18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f1c:	e00a      	b.n	8000f34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	4908      	ldr	r1, [pc, #32]	; (8000f44 <__NVIC_SetPriority+0x50>)
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	f003 030f 	and.w	r3, r3, #15
 8000f2a:	3b04      	subs	r3, #4
 8000f2c:	0112      	lsls	r2, r2, #4
 8000f2e:	b2d2      	uxtb	r2, r2
 8000f30:	440b      	add	r3, r1
 8000f32:	761a      	strb	r2, [r3, #24]
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000e100 	.word	0xe000e100
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b089      	sub	sp, #36	; 0x24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	f1c3 0307 	rsb	r3, r3, #7
 8000f62:	2b04      	cmp	r3, #4
 8000f64:	bf28      	it	cs
 8000f66:	2304      	movcs	r3, #4
 8000f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	3304      	adds	r3, #4
 8000f6e:	2b06      	cmp	r3, #6
 8000f70:	d902      	bls.n	8000f78 <NVIC_EncodePriority+0x30>
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	3b03      	subs	r3, #3
 8000f76:	e000      	b.n	8000f7a <NVIC_EncodePriority+0x32>
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43da      	mvns	r2, r3
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	401a      	ands	r2, r3
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f90:	f04f 31ff 	mov.w	r1, #4294967295
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9a:	43d9      	mvns	r1, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa0:	4313      	orrs	r3, r2
         );
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3724      	adds	r7, #36	; 0x24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
	...

08000fb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fc0:	d301      	bcc.n	8000fc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e00f      	b.n	8000fe6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fc6:	4a0a      	ldr	r2, [pc, #40]	; (8000ff0 <SysTick_Config+0x40>)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fce:	210f      	movs	r1, #15
 8000fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd4:	f7ff ff8e 	bl	8000ef4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd8:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <SysTick_Config+0x40>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fde:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <SysTick_Config+0x40>)
 8000fe0:	2207      	movs	r2, #7
 8000fe2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	e000e010 	.word	0xe000e010

08000ff4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f7ff ff29 	bl	8000e54 <__NVIC_SetPriorityGrouping>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800100a:	b580      	push	{r7, lr}
 800100c:	b086      	sub	sp, #24
 800100e:	af00      	add	r7, sp, #0
 8001010:	4603      	mov	r3, r0
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800101c:	f7ff ff3e 	bl	8000e9c <__NVIC_GetPriorityGrouping>
 8001020:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	68b9      	ldr	r1, [r7, #8]
 8001026:	6978      	ldr	r0, [r7, #20]
 8001028:	f7ff ff8e 	bl	8000f48 <NVIC_EncodePriority>
 800102c:	4602      	mov	r2, r0
 800102e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001032:	4611      	mov	r1, r2
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff5d 	bl	8000ef4 <__NVIC_SetPriority>
}
 800103a:	bf00      	nop
 800103c:	3718      	adds	r7, #24
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	4603      	mov	r3, r0
 800104a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800104c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff31 	bl	8000eb8 <__NVIC_EnableIRQ>
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f7ff ffa2 	bl	8000fb0 <SysTick_Config>
 800106c:	4603      	mov	r3, r0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001078:	b480      	push	{r7}
 800107a:	b089      	sub	sp, #36	; 0x24
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800108a:	2300      	movs	r3, #0
 800108c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
 8001092:	e165      	b.n	8001360 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001094:	2201      	movs	r2, #1
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	697a      	ldr	r2, [r7, #20]
 80010a4:	4013      	ands	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	f040 8154 	bne.w	800135a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d00b      	beq.n	80010d2 <HAL_GPIO_Init+0x5a>
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d007      	beq.n	80010d2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010c6:	2b11      	cmp	r3, #17
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	2b12      	cmp	r3, #18
 80010d0:	d130      	bne.n	8001134 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	2203      	movs	r2, #3
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4013      	ands	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	68da      	ldr	r2, [r3, #12]
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001108:	2201      	movs	r2, #1
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	091b      	lsrs	r3, r3, #4
 800111e:	f003 0201 	and.w	r2, r3, #1
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	2203      	movs	r2, #3
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43db      	mvns	r3, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	689a      	ldr	r2, [r3, #8]
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	2b02      	cmp	r3, #2
 800116a:	d003      	beq.n	8001174 <HAL_GPIO_Init+0xfc>
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	2b12      	cmp	r3, #18
 8001172:	d123      	bne.n	80011bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	08da      	lsrs	r2, r3, #3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3208      	adds	r2, #8
 800117c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001180:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	f003 0307 	and.w	r3, r3, #7
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	220f      	movs	r2, #15
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	691a      	ldr	r2, [r3, #16]
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	08da      	lsrs	r2, r3, #3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	3208      	adds	r2, #8
 80011b6:	69b9      	ldr	r1, [r7, #24]
 80011b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	2203      	movs	r2, #3
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f003 0203 	and.w	r2, r3, #3
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	f000 80ae 	beq.w	800135a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	4b5c      	ldr	r3, [pc, #368]	; (8001374 <HAL_GPIO_Init+0x2fc>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	4a5b      	ldr	r2, [pc, #364]	; (8001374 <HAL_GPIO_Init+0x2fc>)
 8001208:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800120c:	6453      	str	r3, [r2, #68]	; 0x44
 800120e:	4b59      	ldr	r3, [pc, #356]	; (8001374 <HAL_GPIO_Init+0x2fc>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800121a:	4a57      	ldr	r2, [pc, #348]	; (8001378 <HAL_GPIO_Init+0x300>)
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	089b      	lsrs	r3, r3, #2
 8001220:	3302      	adds	r3, #2
 8001222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f003 0303 	and.w	r3, r3, #3
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	220f      	movs	r2, #15
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43db      	mvns	r3, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4013      	ands	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a4e      	ldr	r2, [pc, #312]	; (800137c <HAL_GPIO_Init+0x304>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d025      	beq.n	8001292 <HAL_GPIO_Init+0x21a>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a4d      	ldr	r2, [pc, #308]	; (8001380 <HAL_GPIO_Init+0x308>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d01f      	beq.n	800128e <HAL_GPIO_Init+0x216>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a4c      	ldr	r2, [pc, #304]	; (8001384 <HAL_GPIO_Init+0x30c>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d019      	beq.n	800128a <HAL_GPIO_Init+0x212>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a4b      	ldr	r2, [pc, #300]	; (8001388 <HAL_GPIO_Init+0x310>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d013      	beq.n	8001286 <HAL_GPIO_Init+0x20e>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a4a      	ldr	r2, [pc, #296]	; (800138c <HAL_GPIO_Init+0x314>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d00d      	beq.n	8001282 <HAL_GPIO_Init+0x20a>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a49      	ldr	r2, [pc, #292]	; (8001390 <HAL_GPIO_Init+0x318>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d007      	beq.n	800127e <HAL_GPIO_Init+0x206>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a48      	ldr	r2, [pc, #288]	; (8001394 <HAL_GPIO_Init+0x31c>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d101      	bne.n	800127a <HAL_GPIO_Init+0x202>
 8001276:	2306      	movs	r3, #6
 8001278:	e00c      	b.n	8001294 <HAL_GPIO_Init+0x21c>
 800127a:	2307      	movs	r3, #7
 800127c:	e00a      	b.n	8001294 <HAL_GPIO_Init+0x21c>
 800127e:	2305      	movs	r3, #5
 8001280:	e008      	b.n	8001294 <HAL_GPIO_Init+0x21c>
 8001282:	2304      	movs	r3, #4
 8001284:	e006      	b.n	8001294 <HAL_GPIO_Init+0x21c>
 8001286:	2303      	movs	r3, #3
 8001288:	e004      	b.n	8001294 <HAL_GPIO_Init+0x21c>
 800128a:	2302      	movs	r3, #2
 800128c:	e002      	b.n	8001294 <HAL_GPIO_Init+0x21c>
 800128e:	2301      	movs	r3, #1
 8001290:	e000      	b.n	8001294 <HAL_GPIO_Init+0x21c>
 8001292:	2300      	movs	r3, #0
 8001294:	69fa      	ldr	r2, [r7, #28]
 8001296:	f002 0203 	and.w	r2, r2, #3
 800129a:	0092      	lsls	r2, r2, #2
 800129c:	4093      	lsls	r3, r2
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012a4:	4934      	ldr	r1, [pc, #208]	; (8001378 <HAL_GPIO_Init+0x300>)
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	089b      	lsrs	r3, r3, #2
 80012aa:	3302      	adds	r3, #2
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012b2:	4b39      	ldr	r3, [pc, #228]	; (8001398 <HAL_GPIO_Init+0x320>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	43db      	mvns	r3, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4013      	ands	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012d6:	4a30      	ldr	r2, [pc, #192]	; (8001398 <HAL_GPIO_Init+0x320>)
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012dc:	4b2e      	ldr	r3, [pc, #184]	; (8001398 <HAL_GPIO_Init+0x320>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d003      	beq.n	8001300 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001300:	4a25      	ldr	r2, [pc, #148]	; (8001398 <HAL_GPIO_Init+0x320>)
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001306:	4b24      	ldr	r3, [pc, #144]	; (8001398 <HAL_GPIO_Init+0x320>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	43db      	mvns	r3, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4013      	ands	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	4313      	orrs	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800132a:	4a1b      	ldr	r2, [pc, #108]	; (8001398 <HAL_GPIO_Init+0x320>)
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001330:	4b19      	ldr	r3, [pc, #100]	; (8001398 <HAL_GPIO_Init+0x320>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	43db      	mvns	r3, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d003      	beq.n	8001354 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	4313      	orrs	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001354:	4a10      	ldr	r2, [pc, #64]	; (8001398 <HAL_GPIO_Init+0x320>)
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3301      	adds	r3, #1
 800135e:	61fb      	str	r3, [r7, #28]
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	2b0f      	cmp	r3, #15
 8001364:	f67f ae96 	bls.w	8001094 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001368:	bf00      	nop
 800136a:	3724      	adds	r7, #36	; 0x24
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	40023800 	.word	0x40023800
 8001378:	40013800 	.word	0x40013800
 800137c:	40020000 	.word	0x40020000
 8001380:	40020400 	.word	0x40020400
 8001384:	40020800 	.word	0x40020800
 8001388:	40020c00 	.word	0x40020c00
 800138c:	40021000 	.word	0x40021000
 8001390:	40021400 	.word	0x40021400
 8001394:	40021800 	.word	0x40021800
 8001398:	40013c00 	.word	0x40013c00

0800139c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	807b      	strh	r3, [r7, #2]
 80013a8:	4613      	mov	r3, r2
 80013aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013ac:	787b      	ldrb	r3, [r7, #1]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013b2:	887a      	ldrh	r2, [r7, #2]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013b8:	e003      	b.n	80013c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ba:	887b      	ldrh	r3, [r7, #2]
 80013bc:	041a      	lsls	r2, r3, #16
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	619a      	str	r2, [r3, #24]
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b083      	sub	sp, #12
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
 80013d6:	460b      	mov	r3, r1
 80013d8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	695a      	ldr	r2, [r3, #20]
 80013de:	887b      	ldrh	r3, [r7, #2]
 80013e0:	401a      	ands	r2, r3
 80013e2:	887b      	ldrh	r3, [r7, #2]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d104      	bne.n	80013f2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80013e8:	887b      	ldrh	r3, [r7, #2]
 80013ea:	041a      	lsls	r2, r3, #16
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80013f0:	e002      	b.n	80013f8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80013f2:	887a      	ldrh	r2, [r7, #2]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	619a      	str	r2, [r3, #24]
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800140e:	4b08      	ldr	r3, [pc, #32]	; (8001430 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001410:	695a      	ldr	r2, [r3, #20]
 8001412:	88fb      	ldrh	r3, [r7, #6]
 8001414:	4013      	ands	r3, r2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d006      	beq.n	8001428 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800141a:	4a05      	ldr	r2, [pc, #20]	; (8001430 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800141c:	88fb      	ldrh	r3, [r7, #6]
 800141e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001420:	88fb      	ldrh	r3, [r7, #6]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff f980 	bl	8000728 <HAL_GPIO_EXTI_Callback>
  }
}
 8001428:	bf00      	nop
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40013c00 	.word	0x40013c00

08001434 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d101      	bne.n	8001448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e0cc      	b.n	80015e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001448:	4b68      	ldr	r3, [pc, #416]	; (80015ec <HAL_RCC_ClockConfig+0x1b8>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 030f 	and.w	r3, r3, #15
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	429a      	cmp	r2, r3
 8001454:	d90c      	bls.n	8001470 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001456:	4b65      	ldr	r3, [pc, #404]	; (80015ec <HAL_RCC_ClockConfig+0x1b8>)
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800145e:	4b63      	ldr	r3, [pc, #396]	; (80015ec <HAL_RCC_ClockConfig+0x1b8>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 030f 	and.w	r3, r3, #15
 8001466:	683a      	ldr	r2, [r7, #0]
 8001468:	429a      	cmp	r2, r3
 800146a:	d001      	beq.n	8001470 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e0b8      	b.n	80015e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d020      	beq.n	80014be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0304 	and.w	r3, r3, #4
 8001484:	2b00      	cmp	r3, #0
 8001486:	d005      	beq.n	8001494 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001488:	4b59      	ldr	r3, [pc, #356]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	4a58      	ldr	r2, [pc, #352]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 800148e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001492:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0308 	and.w	r3, r3, #8
 800149c:	2b00      	cmp	r3, #0
 800149e:	d005      	beq.n	80014ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014a0:	4b53      	ldr	r3, [pc, #332]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	4a52      	ldr	r2, [pc, #328]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 80014a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014ac:	4b50      	ldr	r3, [pc, #320]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	494d      	ldr	r1, [pc, #308]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d044      	beq.n	8001554 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d107      	bne.n	80014e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d2:	4b47      	ldr	r3, [pc, #284]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d119      	bne.n	8001512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e07f      	b.n	80015e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d003      	beq.n	80014f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014ee:	2b03      	cmp	r3, #3
 80014f0:	d107      	bne.n	8001502 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014f2:	4b3f      	ldr	r3, [pc, #252]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d109      	bne.n	8001512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e06f      	b.n	80015e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001502:	4b3b      	ldr	r3, [pc, #236]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e067      	b.n	80015e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001512:	4b37      	ldr	r3, [pc, #220]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f023 0203 	bic.w	r2, r3, #3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	4934      	ldr	r1, [pc, #208]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001520:	4313      	orrs	r3, r2
 8001522:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001524:	f7ff fc68 	bl	8000df8 <HAL_GetTick>
 8001528:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800152a:	e00a      	b.n	8001542 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800152c:	f7ff fc64 	bl	8000df8 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	f241 3288 	movw	r2, #5000	; 0x1388
 800153a:	4293      	cmp	r3, r2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e04f      	b.n	80015e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001542:	4b2b      	ldr	r3, [pc, #172]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f003 020c 	and.w	r2, r3, #12
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	429a      	cmp	r2, r3
 8001552:	d1eb      	bne.n	800152c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001554:	4b25      	ldr	r3, [pc, #148]	; (80015ec <HAL_RCC_ClockConfig+0x1b8>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 030f 	and.w	r3, r3, #15
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	429a      	cmp	r2, r3
 8001560:	d20c      	bcs.n	800157c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001562:	4b22      	ldr	r3, [pc, #136]	; (80015ec <HAL_RCC_ClockConfig+0x1b8>)
 8001564:	683a      	ldr	r2, [r7, #0]
 8001566:	b2d2      	uxtb	r2, r2
 8001568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800156a:	4b20      	ldr	r3, [pc, #128]	; (80015ec <HAL_RCC_ClockConfig+0x1b8>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 030f 	and.w	r3, r3, #15
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	429a      	cmp	r2, r3
 8001576:	d001      	beq.n	800157c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e032      	b.n	80015e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	2b00      	cmp	r3, #0
 8001586:	d008      	beq.n	800159a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001588:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	4916      	ldr	r1, [pc, #88]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001596:	4313      	orrs	r3, r2
 8001598:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0308 	and.w	r3, r3, #8
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d009      	beq.n	80015ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015a6:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	490e      	ldr	r1, [pc, #56]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 80015b6:	4313      	orrs	r3, r2
 80015b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015ba:	f000 f821 	bl	8001600 <HAL_RCC_GetSysClockFreq>
 80015be:	4601      	mov	r1, r0
 80015c0:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	091b      	lsrs	r3, r3, #4
 80015c6:	f003 030f 	and.w	r3, r3, #15
 80015ca:	4a0a      	ldr	r2, [pc, #40]	; (80015f4 <HAL_RCC_ClockConfig+0x1c0>)
 80015cc:	5cd3      	ldrb	r3, [r2, r3]
 80015ce:	fa21 f303 	lsr.w	r3, r1, r3
 80015d2:	4a09      	ldr	r2, [pc, #36]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 80015d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015d6:	4b09      	ldr	r3, [pc, #36]	; (80015fc <HAL_RCC_ClockConfig+0x1c8>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fbc8 	bl	8000d70 <HAL_InitTick>

  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40023c00 	.word	0x40023c00
 80015f0:	40023800 	.word	0x40023800
 80015f4:	08002610 	.word	0x08002610
 80015f8:	20000004 	.word	0x20000004
 80015fc:	20000008 	.word	0x20000008

08001600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001602:	b087      	sub	sp, #28
 8001604:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800160e:	2300      	movs	r3, #0
 8001610:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001612:	2300      	movs	r3, #0
 8001614:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001616:	2300      	movs	r3, #0
 8001618:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800161a:	4b9f      	ldr	r3, [pc, #636]	; (8001898 <HAL_RCC_GetSysClockFreq+0x298>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f003 030c 	and.w	r3, r3, #12
 8001622:	2b0c      	cmp	r3, #12
 8001624:	f200 8130 	bhi.w	8001888 <HAL_RCC_GetSysClockFreq+0x288>
 8001628:	a201      	add	r2, pc, #4	; (adr r2, 8001630 <HAL_RCC_GetSysClockFreq+0x30>)
 800162a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800162e:	bf00      	nop
 8001630:	08001665 	.word	0x08001665
 8001634:	08001889 	.word	0x08001889
 8001638:	08001889 	.word	0x08001889
 800163c:	08001889 	.word	0x08001889
 8001640:	0800166b 	.word	0x0800166b
 8001644:	08001889 	.word	0x08001889
 8001648:	08001889 	.word	0x08001889
 800164c:	08001889 	.word	0x08001889
 8001650:	08001671 	.word	0x08001671
 8001654:	08001889 	.word	0x08001889
 8001658:	08001889 	.word	0x08001889
 800165c:	08001889 	.word	0x08001889
 8001660:	0800177f 	.word	0x0800177f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001664:	4b8d      	ldr	r3, [pc, #564]	; (800189c <HAL_RCC_GetSysClockFreq+0x29c>)
 8001666:	613b      	str	r3, [r7, #16]
       break;
 8001668:	e111      	b.n	800188e <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800166a:	4b8d      	ldr	r3, [pc, #564]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x2a0>)
 800166c:	613b      	str	r3, [r7, #16]
      break;
 800166e:	e10e      	b.n	800188e <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001670:	4b89      	ldr	r3, [pc, #548]	; (8001898 <HAL_RCC_GetSysClockFreq+0x298>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001678:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800167a:	4b87      	ldr	r3, [pc, #540]	; (8001898 <HAL_RCC_GetSysClockFreq+0x298>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d023      	beq.n	80016ce <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001686:	4b84      	ldr	r3, [pc, #528]	; (8001898 <HAL_RCC_GetSysClockFreq+0x298>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	099b      	lsrs	r3, r3, #6
 800168c:	f04f 0400 	mov.w	r4, #0
 8001690:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001694:	f04f 0200 	mov.w	r2, #0
 8001698:	ea03 0501 	and.w	r5, r3, r1
 800169c:	ea04 0602 	and.w	r6, r4, r2
 80016a0:	4a7f      	ldr	r2, [pc, #508]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80016a2:	fb02 f106 	mul.w	r1, r2, r6
 80016a6:	2200      	movs	r2, #0
 80016a8:	fb02 f205 	mul.w	r2, r2, r5
 80016ac:	440a      	add	r2, r1
 80016ae:	497c      	ldr	r1, [pc, #496]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80016b0:	fba5 0101 	umull	r0, r1, r5, r1
 80016b4:	1853      	adds	r3, r2, r1
 80016b6:	4619      	mov	r1, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f04f 0400 	mov.w	r4, #0
 80016be:	461a      	mov	r2, r3
 80016c0:	4623      	mov	r3, r4
 80016c2:	f7fe fd9f 	bl	8000204 <__aeabi_uldivmod>
 80016c6:	4603      	mov	r3, r0
 80016c8:	460c      	mov	r4, r1
 80016ca:	617b      	str	r3, [r7, #20]
 80016cc:	e049      	b.n	8001762 <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016ce:	4b72      	ldr	r3, [pc, #456]	; (8001898 <HAL_RCC_GetSysClockFreq+0x298>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	099b      	lsrs	r3, r3, #6
 80016d4:	f04f 0400 	mov.w	r4, #0
 80016d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	ea03 0501 	and.w	r5, r3, r1
 80016e4:	ea04 0602 	and.w	r6, r4, r2
 80016e8:	4629      	mov	r1, r5
 80016ea:	4632      	mov	r2, r6
 80016ec:	f04f 0300 	mov.w	r3, #0
 80016f0:	f04f 0400 	mov.w	r4, #0
 80016f4:	0154      	lsls	r4, r2, #5
 80016f6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80016fa:	014b      	lsls	r3, r1, #5
 80016fc:	4619      	mov	r1, r3
 80016fe:	4622      	mov	r2, r4
 8001700:	1b49      	subs	r1, r1, r5
 8001702:	eb62 0206 	sbc.w	r2, r2, r6
 8001706:	f04f 0300 	mov.w	r3, #0
 800170a:	f04f 0400 	mov.w	r4, #0
 800170e:	0194      	lsls	r4, r2, #6
 8001710:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001714:	018b      	lsls	r3, r1, #6
 8001716:	1a5b      	subs	r3, r3, r1
 8001718:	eb64 0402 	sbc.w	r4, r4, r2
 800171c:	f04f 0100 	mov.w	r1, #0
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	00e2      	lsls	r2, r4, #3
 8001726:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800172a:	00d9      	lsls	r1, r3, #3
 800172c:	460b      	mov	r3, r1
 800172e:	4614      	mov	r4, r2
 8001730:	195b      	adds	r3, r3, r5
 8001732:	eb44 0406 	adc.w	r4, r4, r6
 8001736:	f04f 0100 	mov.w	r1, #0
 800173a:	f04f 0200 	mov.w	r2, #0
 800173e:	02a2      	lsls	r2, r4, #10
 8001740:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001744:	0299      	lsls	r1, r3, #10
 8001746:	460b      	mov	r3, r1
 8001748:	4614      	mov	r4, r2
 800174a:	4618      	mov	r0, r3
 800174c:	4621      	mov	r1, r4
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f04f 0400 	mov.w	r4, #0
 8001754:	461a      	mov	r2, r3
 8001756:	4623      	mov	r3, r4
 8001758:	f7fe fd54 	bl	8000204 <__aeabi_uldivmod>
 800175c:	4603      	mov	r3, r0
 800175e:	460c      	mov	r4, r1
 8001760:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001762:	4b4d      	ldr	r3, [pc, #308]	; (8001898 <HAL_RCC_GetSysClockFreq+0x298>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	0c1b      	lsrs	r3, r3, #16
 8001768:	f003 0303 	and.w	r3, r3, #3
 800176c:	3301      	adds	r3, #1
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001772:	697a      	ldr	r2, [r7, #20]
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	fbb2 f3f3 	udiv	r3, r2, r3
 800177a:	613b      	str	r3, [r7, #16]
      break;
 800177c:	e087      	b.n	800188e <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800177e:	4b46      	ldr	r3, [pc, #280]	; (8001898 <HAL_RCC_GetSysClockFreq+0x298>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001786:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001788:	4b43      	ldr	r3, [pc, #268]	; (8001898 <HAL_RCC_GetSysClockFreq+0x298>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d023      	beq.n	80017dc <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001794:	4b40      	ldr	r3, [pc, #256]	; (8001898 <HAL_RCC_GetSysClockFreq+0x298>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	099b      	lsrs	r3, r3, #6
 800179a:	f04f 0400 	mov.w	r4, #0
 800179e:	f240 11ff 	movw	r1, #511	; 0x1ff
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	ea03 0501 	and.w	r5, r3, r1
 80017aa:	ea04 0602 	and.w	r6, r4, r2
 80017ae:	4a3c      	ldr	r2, [pc, #240]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80017b0:	fb02 f106 	mul.w	r1, r2, r6
 80017b4:	2200      	movs	r2, #0
 80017b6:	fb02 f205 	mul.w	r2, r2, r5
 80017ba:	440a      	add	r2, r1
 80017bc:	4938      	ldr	r1, [pc, #224]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80017be:	fba5 0101 	umull	r0, r1, r5, r1
 80017c2:	1853      	adds	r3, r2, r1
 80017c4:	4619      	mov	r1, r3
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f04f 0400 	mov.w	r4, #0
 80017cc:	461a      	mov	r2, r3
 80017ce:	4623      	mov	r3, r4
 80017d0:	f7fe fd18 	bl	8000204 <__aeabi_uldivmod>
 80017d4:	4603      	mov	r3, r0
 80017d6:	460c      	mov	r4, r1
 80017d8:	617b      	str	r3, [r7, #20]
 80017da:	e049      	b.n	8001870 <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017dc:	4b2e      	ldr	r3, [pc, #184]	; (8001898 <HAL_RCC_GetSysClockFreq+0x298>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	099b      	lsrs	r3, r3, #6
 80017e2:	f04f 0400 	mov.w	r4, #0
 80017e6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80017ea:	f04f 0200 	mov.w	r2, #0
 80017ee:	ea03 0501 	and.w	r5, r3, r1
 80017f2:	ea04 0602 	and.w	r6, r4, r2
 80017f6:	4629      	mov	r1, r5
 80017f8:	4632      	mov	r2, r6
 80017fa:	f04f 0300 	mov.w	r3, #0
 80017fe:	f04f 0400 	mov.w	r4, #0
 8001802:	0154      	lsls	r4, r2, #5
 8001804:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001808:	014b      	lsls	r3, r1, #5
 800180a:	4619      	mov	r1, r3
 800180c:	4622      	mov	r2, r4
 800180e:	1b49      	subs	r1, r1, r5
 8001810:	eb62 0206 	sbc.w	r2, r2, r6
 8001814:	f04f 0300 	mov.w	r3, #0
 8001818:	f04f 0400 	mov.w	r4, #0
 800181c:	0194      	lsls	r4, r2, #6
 800181e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001822:	018b      	lsls	r3, r1, #6
 8001824:	1a5b      	subs	r3, r3, r1
 8001826:	eb64 0402 	sbc.w	r4, r4, r2
 800182a:	f04f 0100 	mov.w	r1, #0
 800182e:	f04f 0200 	mov.w	r2, #0
 8001832:	00e2      	lsls	r2, r4, #3
 8001834:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001838:	00d9      	lsls	r1, r3, #3
 800183a:	460b      	mov	r3, r1
 800183c:	4614      	mov	r4, r2
 800183e:	195b      	adds	r3, r3, r5
 8001840:	eb44 0406 	adc.w	r4, r4, r6
 8001844:	f04f 0100 	mov.w	r1, #0
 8001848:	f04f 0200 	mov.w	r2, #0
 800184c:	02a2      	lsls	r2, r4, #10
 800184e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001852:	0299      	lsls	r1, r3, #10
 8001854:	460b      	mov	r3, r1
 8001856:	4614      	mov	r4, r2
 8001858:	4618      	mov	r0, r3
 800185a:	4621      	mov	r1, r4
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f04f 0400 	mov.w	r4, #0
 8001862:	461a      	mov	r2, r3
 8001864:	4623      	mov	r3, r4
 8001866:	f7fe fccd 	bl	8000204 <__aeabi_uldivmod>
 800186a:	4603      	mov	r3, r0
 800186c:	460c      	mov	r4, r1
 800186e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001870:	4b09      	ldr	r3, [pc, #36]	; (8001898 <HAL_RCC_GetSysClockFreq+0x298>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	0f1b      	lsrs	r3, r3, #28
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800187c:	697a      	ldr	r2, [r7, #20]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	fbb2 f3f3 	udiv	r3, r2, r3
 8001884:	613b      	str	r3, [r7, #16]
      break;
 8001886:	e002      	b.n	800188e <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001888:	4b04      	ldr	r3, [pc, #16]	; (800189c <HAL_RCC_GetSysClockFreq+0x29c>)
 800188a:	613b      	str	r3, [r7, #16]
      break;
 800188c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800188e:	693b      	ldr	r3, [r7, #16]
}
 8001890:	4618      	mov	r0, r3
 8001892:	371c      	adds	r7, #28
 8001894:	46bd      	mov	sp, r7
 8001896:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001898:	40023800 	.word	0x40023800
 800189c:	00f42400 	.word	0x00f42400
 80018a0:	017d7840 	.word	0x017d7840

080018a4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018ac:	2300      	movs	r3, #0
 80018ae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f000 8083 	beq.w	80019c4 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80018be:	4b95      	ldr	r3, [pc, #596]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f003 030c 	and.w	r3, r3, #12
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	d019      	beq.n	80018fe <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018ca:	4b92      	ldr	r3, [pc, #584]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80018d2:	2b08      	cmp	r3, #8
 80018d4:	d106      	bne.n	80018e4 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018d6:	4b8f      	ldr	r3, [pc, #572]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018e2:	d00c      	beq.n	80018fe <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018e4:	4b8b      	ldr	r3, [pc, #556]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018ec:	2b0c      	cmp	r3, #12
 80018ee:	d112      	bne.n	8001916 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018f0:	4b88      	ldr	r3, [pc, #544]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018fc:	d10b      	bne.n	8001916 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018fe:	4b85      	ldr	r3, [pc, #532]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d05b      	beq.n	80019c2 <HAL_RCC_OscConfig+0x11e>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d157      	bne.n	80019c2 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e216      	b.n	8001d44 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800191e:	d106      	bne.n	800192e <HAL_RCC_OscConfig+0x8a>
 8001920:	4b7c      	ldr	r3, [pc, #496]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a7b      	ldr	r2, [pc, #492]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 8001926:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800192a:	6013      	str	r3, [r2, #0]
 800192c:	e01d      	b.n	800196a <HAL_RCC_OscConfig+0xc6>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001936:	d10c      	bne.n	8001952 <HAL_RCC_OscConfig+0xae>
 8001938:	4b76      	ldr	r3, [pc, #472]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a75      	ldr	r2, [pc, #468]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 800193e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001942:	6013      	str	r3, [r2, #0]
 8001944:	4b73      	ldr	r3, [pc, #460]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a72      	ldr	r2, [pc, #456]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 800194a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	e00b      	b.n	800196a <HAL_RCC_OscConfig+0xc6>
 8001952:	4b70      	ldr	r3, [pc, #448]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a6f      	ldr	r2, [pc, #444]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 8001958:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800195c:	6013      	str	r3, [r2, #0]
 800195e:	4b6d      	ldr	r3, [pc, #436]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a6c      	ldr	r2, [pc, #432]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 8001964:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001968:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d013      	beq.n	800199a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001972:	f7ff fa41 	bl	8000df8 <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001978:	e008      	b.n	800198c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800197a:	f7ff fa3d 	bl	8000df8 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b64      	cmp	r3, #100	; 0x64
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e1db      	b.n	8001d44 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198c:	4b61      	ldr	r3, [pc, #388]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d0f0      	beq.n	800197a <HAL_RCC_OscConfig+0xd6>
 8001998:	e014      	b.n	80019c4 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199a:	f7ff fa2d 	bl	8000df8 <HAL_GetTick>
 800199e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019a2:	f7ff fa29 	bl	8000df8 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b64      	cmp	r3, #100	; 0x64
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e1c7      	b.n	8001d44 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019b4:	4b57      	ldr	r3, [pc, #348]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1f0      	bne.n	80019a2 <HAL_RCC_OscConfig+0xfe>
 80019c0:	e000      	b.n	80019c4 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d06f      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80019d0:	4b50      	ldr	r3, [pc, #320]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f003 030c 	and.w	r3, r3, #12
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d017      	beq.n	8001a0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019dc:	4b4d      	ldr	r3, [pc, #308]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80019e4:	2b08      	cmp	r3, #8
 80019e6:	d105      	bne.n	80019f4 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019e8:	4b4a      	ldr	r3, [pc, #296]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d00b      	beq.n	8001a0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019f4:	4b47      	ldr	r3, [pc, #284]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019fc:	2b0c      	cmp	r3, #12
 80019fe:	d11c      	bne.n	8001a3a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a00:	4b44      	ldr	r3, [pc, #272]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d116      	bne.n	8001a3a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a0c:	4b41      	ldr	r3, [pc, #260]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d005      	beq.n	8001a24 <HAL_RCC_OscConfig+0x180>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d001      	beq.n	8001a24 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e18f      	b.n	8001d44 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a24:	4b3b      	ldr	r3, [pc, #236]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	4938      	ldr	r1, [pc, #224]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a38:	e03a      	b.n	8001ab0 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d020      	beq.n	8001a84 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a42:	4b35      	ldr	r3, [pc, #212]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a48:	f7ff f9d6 	bl	8000df8 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a50:	f7ff f9d2 	bl	8000df8 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e170      	b.n	8001d44 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a62:	4b2c      	ldr	r3, [pc, #176]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0f0      	beq.n	8001a50 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a6e:	4b29      	ldr	r3, [pc, #164]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	4925      	ldr	r1, [pc, #148]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	600b      	str	r3, [r1, #0]
 8001a82:	e015      	b.n	8001ab0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a84:	4b24      	ldr	r3, [pc, #144]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8a:	f7ff f9b5 	bl	8000df8 <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a90:	e008      	b.n	8001aa4 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a92:	f7ff f9b1 	bl	8000df8 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e14f      	b.n	8001d44 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aa4:	4b1b      	ldr	r3, [pc, #108]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1f0      	bne.n	8001a92 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0308 	and.w	r3, r3, #8
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d037      	beq.n	8001b2c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	695b      	ldr	r3, [r3, #20]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d016      	beq.n	8001af2 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ac4:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <HAL_RCC_OscConfig+0x278>)
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aca:	f7ff f995 	bl	8000df8 <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ad2:	f7ff f991 	bl	8000df8 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e12f      	b.n	8001d44 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ae4:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <HAL_RCC_OscConfig+0x270>)
 8001ae6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0f0      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x22e>
 8001af0:	e01c      	b.n	8001b2c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001af2:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <HAL_RCC_OscConfig+0x278>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af8:	f7ff f97e 	bl	8000df8 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001afe:	e00f      	b.n	8001b20 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b00:	f7ff f97a 	bl	8000df8 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d908      	bls.n	8001b20 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e118      	b.n	8001d44 <HAL_RCC_OscConfig+0x4a0>
 8001b12:	bf00      	nop
 8001b14:	40023800 	.word	0x40023800
 8001b18:	42470000 	.word	0x42470000
 8001b1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b20:	4b8a      	ldr	r3, [pc, #552]	; (8001d4c <HAL_RCC_OscConfig+0x4a8>)
 8001b22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1e9      	bne.n	8001b00 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0304 	and.w	r3, r3, #4
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f000 8097 	beq.w	8001c68 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b3e:	4b83      	ldr	r3, [pc, #524]	; (8001d4c <HAL_RCC_OscConfig+0x4a8>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d10f      	bne.n	8001b6a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	4b7f      	ldr	r3, [pc, #508]	; (8001d4c <HAL_RCC_OscConfig+0x4a8>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	4a7e      	ldr	r2, [pc, #504]	; (8001d4c <HAL_RCC_OscConfig+0x4a8>)
 8001b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b58:	6413      	str	r3, [r2, #64]	; 0x40
 8001b5a:	4b7c      	ldr	r3, [pc, #496]	; (8001d4c <HAL_RCC_OscConfig+0x4a8>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b66:	2301      	movs	r3, #1
 8001b68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b6a:	4b79      	ldr	r3, [pc, #484]	; (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d118      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b76:	4b76      	ldr	r3, [pc, #472]	; (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a75      	ldr	r2, [pc, #468]	; (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b82:	f7ff f939 	bl	8000df8 <HAL_GetTick>
 8001b86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b88:	e008      	b.n	8001b9c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b8a:	f7ff f935 	bl	8000df8 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e0d3      	b.n	8001d44 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b9c:	4b6c      	ldr	r3, [pc, #432]	; (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d0f0      	beq.n	8001b8a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d106      	bne.n	8001bbe <HAL_RCC_OscConfig+0x31a>
 8001bb0:	4b66      	ldr	r3, [pc, #408]	; (8001d4c <HAL_RCC_OscConfig+0x4a8>)
 8001bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb4:	4a65      	ldr	r2, [pc, #404]	; (8001d4c <HAL_RCC_OscConfig+0x4a8>)
 8001bb6:	f043 0301 	orr.w	r3, r3, #1
 8001bba:	6713      	str	r3, [r2, #112]	; 0x70
 8001bbc:	e01c      	b.n	8001bf8 <HAL_RCC_OscConfig+0x354>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	2b05      	cmp	r3, #5
 8001bc4:	d10c      	bne.n	8001be0 <HAL_RCC_OscConfig+0x33c>
 8001bc6:	4b61      	ldr	r3, [pc, #388]	; (8001d4c <HAL_RCC_OscConfig+0x4a8>)
 8001bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bca:	4a60      	ldr	r2, [pc, #384]	; (8001d4c <HAL_RCC_OscConfig+0x4a8>)
 8001bcc:	f043 0304 	orr.w	r3, r3, #4
 8001bd0:	6713      	str	r3, [r2, #112]	; 0x70
 8001bd2:	4b5e      	ldr	r3, [pc, #376]	; (8001d4c <HAL_RCC_OscConfig+0x4a8>)
 8001bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd6:	4a5d      	ldr	r2, [pc, #372]	; (8001d4c <HAL_RCC_OscConfig+0x4a8>)
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8001bde:	e00b      	b.n	8001bf8 <HAL_RCC_OscConfig+0x354>
 8001be0:	4b5a      	ldr	r3, [pc, #360]	; (8001d4c <HAL_RCC_OscConfig+0x4a8>)
 8001be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be4:	4a59      	ldr	r2, [pc, #356]	; (8001d4c <HAL_RCC_OscConfig+0x4a8>)
 8001be6:	f023 0301 	bic.w	r3, r3, #1
 8001bea:	6713      	str	r3, [r2, #112]	; 0x70
 8001bec:	4b57      	ldr	r3, [pc, #348]	; (8001d4c <HAL_RCC_OscConfig+0x4a8>)
 8001bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf0:	4a56      	ldr	r2, [pc, #344]	; (8001d4c <HAL_RCC_OscConfig+0x4a8>)
 8001bf2:	f023 0304 	bic.w	r3, r3, #4
 8001bf6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d015      	beq.n	8001c2c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c00:	f7ff f8fa 	bl	8000df8 <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c06:	e00a      	b.n	8001c1e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c08:	f7ff f8f6 	bl	8000df8 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e092      	b.n	8001d44 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c1e:	4b4b      	ldr	r3, [pc, #300]	; (8001d4c <HAL_RCC_OscConfig+0x4a8>)
 8001c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0ee      	beq.n	8001c08 <HAL_RCC_OscConfig+0x364>
 8001c2a:	e014      	b.n	8001c56 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c2c:	f7ff f8e4 	bl	8000df8 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c32:	e00a      	b.n	8001c4a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c34:	f7ff f8e0 	bl	8000df8 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e07c      	b.n	8001d44 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c4a:	4b40      	ldr	r3, [pc, #256]	; (8001d4c <HAL_RCC_OscConfig+0x4a8>)
 8001c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1ee      	bne.n	8001c34 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c56:	7dfb      	ldrb	r3, [r7, #23]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d105      	bne.n	8001c68 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c5c:	4b3b      	ldr	r3, [pc, #236]	; (8001d4c <HAL_RCC_OscConfig+0x4a8>)
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c60:	4a3a      	ldr	r2, [pc, #232]	; (8001d4c <HAL_RCC_OscConfig+0x4a8>)
 8001c62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d068      	beq.n	8001d42 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c70:	4b36      	ldr	r3, [pc, #216]	; (8001d4c <HAL_RCC_OscConfig+0x4a8>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 030c 	and.w	r3, r3, #12
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d060      	beq.n	8001d3e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d145      	bne.n	8001d10 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c84:	4b33      	ldr	r3, [pc, #204]	; (8001d54 <HAL_RCC_OscConfig+0x4b0>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8a:	f7ff f8b5 	bl	8000df8 <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c92:	f7ff f8b1 	bl	8000df8 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e04f      	b.n	8001d44 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ca4:	4b29      	ldr	r3, [pc, #164]	; (8001d4c <HAL_RCC_OscConfig+0x4a8>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1f0      	bne.n	8001c92 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	69da      	ldr	r2, [r3, #28]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a1b      	ldr	r3, [r3, #32]
 8001cb8:	431a      	orrs	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbe:	019b      	lsls	r3, r3, #6
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc6:	085b      	lsrs	r3, r3, #1
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	041b      	lsls	r3, r3, #16
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd2:	061b      	lsls	r3, r3, #24
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	071b      	lsls	r3, r3, #28
 8001cdc:	491b      	ldr	r1, [pc, #108]	; (8001d4c <HAL_RCC_OscConfig+0x4a8>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ce2:	4b1c      	ldr	r3, [pc, #112]	; (8001d54 <HAL_RCC_OscConfig+0x4b0>)
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce8:	f7ff f886 	bl	8000df8 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cf0:	f7ff f882 	bl	8000df8 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e020      	b.n	8001d44 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d02:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <HAL_RCC_OscConfig+0x4a8>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d0f0      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x44c>
 8001d0e:	e018      	b.n	8001d42 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d10:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <HAL_RCC_OscConfig+0x4b0>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d16:	f7ff f86f 	bl	8000df8 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d1e:	f7ff f86b 	bl	8000df8 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e009      	b.n	8001d44 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d30:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <HAL_RCC_OscConfig+0x4a8>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1f0      	bne.n	8001d1e <HAL_RCC_OscConfig+0x47a>
 8001d3c:	e001      	b.n	8001d42 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e000      	b.n	8001d44 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	40007000 	.word	0x40007000
 8001d54:	42470060 	.word	0x42470060

08001d58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e01d      	b.n	8001da6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d106      	bne.n	8001d84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7fe ff56 	bl	8000c30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2202      	movs	r2, #2
 8001d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3304      	adds	r3, #4
 8001d94:	4619      	mov	r1, r3
 8001d96:	4610      	mov	r0, r2
 8001d98:	f000 fa38 	bl	800220c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b085      	sub	sp, #20
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2202      	movs	r2, #2
 8001dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2b06      	cmp	r3, #6
 8001dce:	d007      	beq.n	8001de0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f042 0201 	orr.w	r2, r2, #1
 8001dde:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b085      	sub	sp, #20
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68da      	ldr	r2, [r3, #12]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f042 0201 	orr.w	r2, r2, #1
 8001e0c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f003 0307 	and.w	r3, r3, #7
 8001e18:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2b06      	cmp	r3, #6
 8001e1e:	d007      	beq.n	8001e30 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f042 0201 	orr.w	r2, r2, #1
 8001e2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d122      	bne.n	8001e9a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d11b      	bne.n	8001e9a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f06f 0202 	mvn.w	r2, #2
 8001e6a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	f003 0303 	and.w	r3, r3, #3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 f9a5 	bl	80021d0 <HAL_TIM_IC_CaptureCallback>
 8001e86:	e005      	b.n	8001e94 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 f997 	bl	80021bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f9a8 	bl	80021e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	f003 0304 	and.w	r3, r3, #4
 8001ea4:	2b04      	cmp	r3, #4
 8001ea6:	d122      	bne.n	8001eee <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	2b04      	cmp	r3, #4
 8001eb4:	d11b      	bne.n	8001eee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f06f 0204 	mvn.w	r2, #4
 8001ebe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 f97b 	bl	80021d0 <HAL_TIM_IC_CaptureCallback>
 8001eda:	e005      	b.n	8001ee8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 f96d 	bl	80021bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f97e 	bl	80021e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	f003 0308 	and.w	r3, r3, #8
 8001ef8:	2b08      	cmp	r3, #8
 8001efa:	d122      	bne.n	8001f42 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	f003 0308 	and.w	r3, r3, #8
 8001f06:	2b08      	cmp	r3, #8
 8001f08:	d11b      	bne.n	8001f42 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f06f 0208 	mvn.w	r2, #8
 8001f12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2204      	movs	r2, #4
 8001f18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	69db      	ldr	r3, [r3, #28]
 8001f20:	f003 0303 	and.w	r3, r3, #3
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d003      	beq.n	8001f30 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 f951 	bl	80021d0 <HAL_TIM_IC_CaptureCallback>
 8001f2e:	e005      	b.n	8001f3c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 f943 	bl	80021bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f954 	bl	80021e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	f003 0310 	and.w	r3, r3, #16
 8001f4c:	2b10      	cmp	r3, #16
 8001f4e:	d122      	bne.n	8001f96 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	f003 0310 	and.w	r3, r3, #16
 8001f5a:	2b10      	cmp	r3, #16
 8001f5c:	d11b      	bne.n	8001f96 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f06f 0210 	mvn.w	r2, #16
 8001f66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2208      	movs	r2, #8
 8001f6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	69db      	ldr	r3, [r3, #28]
 8001f74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d003      	beq.n	8001f84 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f927 	bl	80021d0 <HAL_TIM_IC_CaptureCallback>
 8001f82:	e005      	b.n	8001f90 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f000 f919 	bl	80021bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f92a 	bl	80021e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d10e      	bne.n	8001fc2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d107      	bne.n	8001fc2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f06f 0201 	mvn.w	r2, #1
 8001fba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7fe fb97 	bl	80006f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fcc:	2b80      	cmp	r3, #128	; 0x80
 8001fce:	d10e      	bne.n	8001fee <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fda:	2b80      	cmp	r3, #128	; 0x80
 8001fdc:	d107      	bne.n	8001fee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001fe6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 facf 	bl	800258c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff8:	2b40      	cmp	r3, #64	; 0x40
 8001ffa:	d10e      	bne.n	800201a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002006:	2b40      	cmp	r3, #64	; 0x40
 8002008:	d107      	bne.n	800201a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002012:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f8ef 	bl	80021f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	f003 0320 	and.w	r3, r3, #32
 8002024:	2b20      	cmp	r3, #32
 8002026:	d10e      	bne.n	8002046 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	f003 0320 	and.w	r3, r3, #32
 8002032:	2b20      	cmp	r3, #32
 8002034:	d107      	bne.n	8002046 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f06f 0220 	mvn.w	r2, #32
 800203e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 fa99 	bl	8002578 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b084      	sub	sp, #16
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
 8002056:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800205e:	2b01      	cmp	r3, #1
 8002060:	d101      	bne.n	8002066 <HAL_TIM_ConfigClockSource+0x18>
 8002062:	2302      	movs	r3, #2
 8002064:	e0a6      	b.n	80021b4 <HAL_TIM_ConfigClockSource+0x166>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2202      	movs	r2, #2
 8002072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002084:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800208c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2b40      	cmp	r3, #64	; 0x40
 800209c:	d067      	beq.n	800216e <HAL_TIM_ConfigClockSource+0x120>
 800209e:	2b40      	cmp	r3, #64	; 0x40
 80020a0:	d80b      	bhi.n	80020ba <HAL_TIM_ConfigClockSource+0x6c>
 80020a2:	2b10      	cmp	r3, #16
 80020a4:	d073      	beq.n	800218e <HAL_TIM_ConfigClockSource+0x140>
 80020a6:	2b10      	cmp	r3, #16
 80020a8:	d802      	bhi.n	80020b0 <HAL_TIM_ConfigClockSource+0x62>
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d06f      	beq.n	800218e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80020ae:	e078      	b.n	80021a2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80020b0:	2b20      	cmp	r3, #32
 80020b2:	d06c      	beq.n	800218e <HAL_TIM_ConfigClockSource+0x140>
 80020b4:	2b30      	cmp	r3, #48	; 0x30
 80020b6:	d06a      	beq.n	800218e <HAL_TIM_ConfigClockSource+0x140>
      break;
 80020b8:	e073      	b.n	80021a2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80020ba:	2b70      	cmp	r3, #112	; 0x70
 80020bc:	d00d      	beq.n	80020da <HAL_TIM_ConfigClockSource+0x8c>
 80020be:	2b70      	cmp	r3, #112	; 0x70
 80020c0:	d804      	bhi.n	80020cc <HAL_TIM_ConfigClockSource+0x7e>
 80020c2:	2b50      	cmp	r3, #80	; 0x50
 80020c4:	d033      	beq.n	800212e <HAL_TIM_ConfigClockSource+0xe0>
 80020c6:	2b60      	cmp	r3, #96	; 0x60
 80020c8:	d041      	beq.n	800214e <HAL_TIM_ConfigClockSource+0x100>
      break;
 80020ca:	e06a      	b.n	80021a2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80020cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020d0:	d066      	beq.n	80021a0 <HAL_TIM_ConfigClockSource+0x152>
 80020d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020d6:	d017      	beq.n	8002108 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80020d8:	e063      	b.n	80021a2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6818      	ldr	r0, [r3, #0]
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	6899      	ldr	r1, [r3, #8]
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	f000 f9a9 	bl	8002440 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80020fc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	609a      	str	r2, [r3, #8]
      break;
 8002106:	e04c      	b.n	80021a2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6818      	ldr	r0, [r3, #0]
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	6899      	ldr	r1, [r3, #8]
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	f000 f992 	bl	8002440 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689a      	ldr	r2, [r3, #8]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800212a:	609a      	str	r2, [r3, #8]
      break;
 800212c:	e039      	b.n	80021a2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6818      	ldr	r0, [r3, #0]
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	6859      	ldr	r1, [r3, #4]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	461a      	mov	r2, r3
 800213c:	f000 f906 	bl	800234c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2150      	movs	r1, #80	; 0x50
 8002146:	4618      	mov	r0, r3
 8002148:	f000 f95f 	bl	800240a <TIM_ITRx_SetConfig>
      break;
 800214c:	e029      	b.n	80021a2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6818      	ldr	r0, [r3, #0]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	6859      	ldr	r1, [r3, #4]
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	461a      	mov	r2, r3
 800215c:	f000 f925 	bl	80023aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2160      	movs	r1, #96	; 0x60
 8002166:	4618      	mov	r0, r3
 8002168:	f000 f94f 	bl	800240a <TIM_ITRx_SetConfig>
      break;
 800216c:	e019      	b.n	80021a2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6818      	ldr	r0, [r3, #0]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	6859      	ldr	r1, [r3, #4]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	461a      	mov	r2, r3
 800217c:	f000 f8e6 	bl	800234c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2140      	movs	r1, #64	; 0x40
 8002186:	4618      	mov	r0, r3
 8002188:	f000 f93f 	bl	800240a <TIM_ITRx_SetConfig>
      break;
 800218c:	e009      	b.n	80021a2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4619      	mov	r1, r3
 8002198:	4610      	mov	r0, r2
 800219a:	f000 f936 	bl	800240a <TIM_ITRx_SetConfig>
      break;
 800219e:	e000      	b.n	80021a2 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80021a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a40      	ldr	r2, [pc, #256]	; (8002320 <TIM_Base_SetConfig+0x114>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d013      	beq.n	800224c <TIM_Base_SetConfig+0x40>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800222a:	d00f      	beq.n	800224c <TIM_Base_SetConfig+0x40>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a3d      	ldr	r2, [pc, #244]	; (8002324 <TIM_Base_SetConfig+0x118>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d00b      	beq.n	800224c <TIM_Base_SetConfig+0x40>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a3c      	ldr	r2, [pc, #240]	; (8002328 <TIM_Base_SetConfig+0x11c>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d007      	beq.n	800224c <TIM_Base_SetConfig+0x40>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a3b      	ldr	r2, [pc, #236]	; (800232c <TIM_Base_SetConfig+0x120>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d003      	beq.n	800224c <TIM_Base_SetConfig+0x40>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4a3a      	ldr	r2, [pc, #232]	; (8002330 <TIM_Base_SetConfig+0x124>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d108      	bne.n	800225e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002252:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	4313      	orrs	r3, r2
 800225c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a2f      	ldr	r2, [pc, #188]	; (8002320 <TIM_Base_SetConfig+0x114>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d02b      	beq.n	80022be <TIM_Base_SetConfig+0xb2>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800226c:	d027      	beq.n	80022be <TIM_Base_SetConfig+0xb2>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a2c      	ldr	r2, [pc, #176]	; (8002324 <TIM_Base_SetConfig+0x118>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d023      	beq.n	80022be <TIM_Base_SetConfig+0xb2>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a2b      	ldr	r2, [pc, #172]	; (8002328 <TIM_Base_SetConfig+0x11c>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d01f      	beq.n	80022be <TIM_Base_SetConfig+0xb2>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a2a      	ldr	r2, [pc, #168]	; (800232c <TIM_Base_SetConfig+0x120>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d01b      	beq.n	80022be <TIM_Base_SetConfig+0xb2>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a29      	ldr	r2, [pc, #164]	; (8002330 <TIM_Base_SetConfig+0x124>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d017      	beq.n	80022be <TIM_Base_SetConfig+0xb2>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a28      	ldr	r2, [pc, #160]	; (8002334 <TIM_Base_SetConfig+0x128>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d013      	beq.n	80022be <TIM_Base_SetConfig+0xb2>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a27      	ldr	r2, [pc, #156]	; (8002338 <TIM_Base_SetConfig+0x12c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d00f      	beq.n	80022be <TIM_Base_SetConfig+0xb2>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a26      	ldr	r2, [pc, #152]	; (800233c <TIM_Base_SetConfig+0x130>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d00b      	beq.n	80022be <TIM_Base_SetConfig+0xb2>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a25      	ldr	r2, [pc, #148]	; (8002340 <TIM_Base_SetConfig+0x134>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d007      	beq.n	80022be <TIM_Base_SetConfig+0xb2>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a24      	ldr	r2, [pc, #144]	; (8002344 <TIM_Base_SetConfig+0x138>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d003      	beq.n	80022be <TIM_Base_SetConfig+0xb2>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a23      	ldr	r2, [pc, #140]	; (8002348 <TIM_Base_SetConfig+0x13c>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d108      	bne.n	80022d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	4313      	orrs	r3, r2
 80022dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a0a      	ldr	r2, [pc, #40]	; (8002320 <TIM_Base_SetConfig+0x114>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d003      	beq.n	8002304 <TIM_Base_SetConfig+0xf8>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a0c      	ldr	r2, [pc, #48]	; (8002330 <TIM_Base_SetConfig+0x124>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d103      	bne.n	800230c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	691a      	ldr	r2, [r3, #16]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	615a      	str	r2, [r3, #20]
}
 8002312:	bf00      	nop
 8002314:	3714      	adds	r7, #20
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	40010000 	.word	0x40010000
 8002324:	40000400 	.word	0x40000400
 8002328:	40000800 	.word	0x40000800
 800232c:	40000c00 	.word	0x40000c00
 8002330:	40010400 	.word	0x40010400
 8002334:	40014000 	.word	0x40014000
 8002338:	40014400 	.word	0x40014400
 800233c:	40014800 	.word	0x40014800
 8002340:	40001800 	.word	0x40001800
 8002344:	40001c00 	.word	0x40001c00
 8002348:	40002000 	.word	0x40002000

0800234c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800234c:	b480      	push	{r7}
 800234e:	b087      	sub	sp, #28
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	f023 0201 	bic.w	r2, r3, #1
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002376:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	011b      	lsls	r3, r3, #4
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	4313      	orrs	r3, r2
 8002380:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	f023 030a 	bic.w	r3, r3, #10
 8002388:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	4313      	orrs	r3, r2
 8002390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	697a      	ldr	r2, [r7, #20]
 800239c:	621a      	str	r2, [r3, #32]
}
 800239e:	bf00      	nop
 80023a0:	371c      	adds	r7, #28
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023aa:	b480      	push	{r7}
 80023ac:	b087      	sub	sp, #28
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	60f8      	str	r0, [r7, #12]
 80023b2:	60b9      	str	r1, [r7, #8]
 80023b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	f023 0210 	bic.w	r2, r3, #16
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80023d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	031b      	lsls	r3, r3, #12
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	4313      	orrs	r3, r2
 80023de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80023e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	011b      	lsls	r3, r3, #4
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	621a      	str	r2, [r3, #32]
}
 80023fe:	bf00      	nop
 8002400:	371c      	adds	r7, #28
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800240a:	b480      	push	{r7}
 800240c:	b085      	sub	sp, #20
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
 8002412:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002420:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002422:	683a      	ldr	r2, [r7, #0]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	4313      	orrs	r3, r2
 8002428:	f043 0307 	orr.w	r3, r3, #7
 800242c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	609a      	str	r2, [r3, #8]
}
 8002434:	bf00      	nop
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002440:	b480      	push	{r7}
 8002442:	b087      	sub	sp, #28
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
 800244c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800245a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	021a      	lsls	r2, r3, #8
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	431a      	orrs	r2, r3
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	4313      	orrs	r3, r2
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	4313      	orrs	r3, r2
 800246c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	609a      	str	r2, [r3, #8]
}
 8002474:	bf00      	nop
 8002476:	371c      	adds	r7, #28
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002490:	2b01      	cmp	r3, #1
 8002492:	d101      	bne.n	8002498 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002494:	2302      	movs	r3, #2
 8002496:	e05a      	b.n	800254e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2202      	movs	r2, #2
 80024a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a21      	ldr	r2, [pc, #132]	; (800255c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d022      	beq.n	8002522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e4:	d01d      	beq.n	8002522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a1d      	ldr	r2, [pc, #116]	; (8002560 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d018      	beq.n	8002522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a1b      	ldr	r2, [pc, #108]	; (8002564 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d013      	beq.n	8002522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a1a      	ldr	r2, [pc, #104]	; (8002568 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d00e      	beq.n	8002522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a18      	ldr	r2, [pc, #96]	; (800256c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d009      	beq.n	8002522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a17      	ldr	r2, [pc, #92]	; (8002570 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d004      	beq.n	8002522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a15      	ldr	r2, [pc, #84]	; (8002574 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d10c      	bne.n	800253c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002528:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	4313      	orrs	r3, r2
 8002532:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68ba      	ldr	r2, [r7, #8]
 800253a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3714      	adds	r7, #20
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	40010000 	.word	0x40010000
 8002560:	40000400 	.word	0x40000400
 8002564:	40000800 	.word	0x40000800
 8002568:	40000c00 	.word	0x40000c00
 800256c:	40010400 	.word	0x40010400
 8002570:	40014000 	.word	0x40014000
 8002574:	40001800 	.word	0x40001800

08002578 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <__libc_init_array>:
 80025a0:	b570      	push	{r4, r5, r6, lr}
 80025a2:	4e0d      	ldr	r6, [pc, #52]	; (80025d8 <__libc_init_array+0x38>)
 80025a4:	4c0d      	ldr	r4, [pc, #52]	; (80025dc <__libc_init_array+0x3c>)
 80025a6:	1ba4      	subs	r4, r4, r6
 80025a8:	10a4      	asrs	r4, r4, #2
 80025aa:	2500      	movs	r5, #0
 80025ac:	42a5      	cmp	r5, r4
 80025ae:	d109      	bne.n	80025c4 <__libc_init_array+0x24>
 80025b0:	4e0b      	ldr	r6, [pc, #44]	; (80025e0 <__libc_init_array+0x40>)
 80025b2:	4c0c      	ldr	r4, [pc, #48]	; (80025e4 <__libc_init_array+0x44>)
 80025b4:	f000 f820 	bl	80025f8 <_init>
 80025b8:	1ba4      	subs	r4, r4, r6
 80025ba:	10a4      	asrs	r4, r4, #2
 80025bc:	2500      	movs	r5, #0
 80025be:	42a5      	cmp	r5, r4
 80025c0:	d105      	bne.n	80025ce <__libc_init_array+0x2e>
 80025c2:	bd70      	pop	{r4, r5, r6, pc}
 80025c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025c8:	4798      	blx	r3
 80025ca:	3501      	adds	r5, #1
 80025cc:	e7ee      	b.n	80025ac <__libc_init_array+0xc>
 80025ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025d2:	4798      	blx	r3
 80025d4:	3501      	adds	r5, #1
 80025d6:	e7f2      	b.n	80025be <__libc_init_array+0x1e>
 80025d8:	08002628 	.word	0x08002628
 80025dc:	08002628 	.word	0x08002628
 80025e0:	08002628 	.word	0x08002628
 80025e4:	0800262c 	.word	0x0800262c

080025e8 <memset>:
 80025e8:	4402      	add	r2, r0
 80025ea:	4603      	mov	r3, r0
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d100      	bne.n	80025f2 <memset+0xa>
 80025f0:	4770      	bx	lr
 80025f2:	f803 1b01 	strb.w	r1, [r3], #1
 80025f6:	e7f9      	b.n	80025ec <memset+0x4>

080025f8 <_init>:
 80025f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025fa:	bf00      	nop
 80025fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025fe:	bc08      	pop	{r3}
 8002600:	469e      	mov	lr, r3
 8002602:	4770      	bx	lr

08002604 <_fini>:
 8002604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002606:	bf00      	nop
 8002608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800260a:	bc08      	pop	{r3}
 800260c:	469e      	mov	lr, r3
 800260e:	4770      	bx	lr
